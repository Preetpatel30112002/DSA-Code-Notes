#https://leetcode.com/problems/palindrome-linked-list/description/

#Palindrome Linklist List

-concept used: linklist middle element and reversing.

-Time: O(n/2 + n/2 + n/2) = O(n)
-space: O(1)

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next


class Solution:
    def reverse(self, head: ListNode) -> ListNode:
        prev = None
        curr = head
        Next = None
        while curr:
            Next = curr.next
            curr.next = prev
            prev = curr
            curr = Next
        return prev
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        slow = head
        fast = head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        rev = self.reverse(slow)

        while rev:
            if head.val != rev.val:
                return False
            else:
                head = head.next
                rev = rev.next
        return True